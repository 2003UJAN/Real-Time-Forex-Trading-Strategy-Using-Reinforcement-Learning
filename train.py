# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import gym
import numpy as np
import pandas as pd
from dqn_agent import DQNAgent
from environment import ForexTradingEnv

forex_data = pd.read_csv("/content/forex_data.csv")

env = ForexTradingEnv("/content/forex_data.csv")
agent = DQNAgent(env)

episodes = 500

for episode in range(episodes):
    result = env.reset()
    if isinstance(result, tuple):  # Gym >= 26.0 returns (state, info)
        state, _ = result
    else:
        state = result  # Older Gym versions return just the state

    state = np.reshape(state, [1, agent.state_size])
    done = False
    total_reward = 0

    while not done:
        action = agent.act(state)
        next_result = env.step(action)

        if isinstance(next_result, tuple):  # Gym >= 26.0
            next_state, reward, done, _, _ = next_result
        else:
            next_state, reward, done, _ = next_result  # Older Gym versions

        next_state = np.reshape(next_state, [1, agent.state_size])
        agent.memory.append((state, action, reward, next_state, done))
        state = next_state
        total_reward += reward
        agent.replay()

    print(f"Episode {episode + 1}/{episodes} - Total Reward: {total_reward:.2f}, Epsilon: {agent.epsilon:.3f}")

    # Decay epsilon (exploration factor)
    if agent.epsilon > agent.epsilon_min:
        agent.epsilon *= agent.epsilon_decay

agent.save("models/dqn_forex_model.h5")
print("Training completed. Model saved as models/dqn_forex_model.h5")